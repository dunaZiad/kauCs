/*
CPCS-324 Project, Phase 1
Students Name            | ID         | Section
--------------------------------------------------
Duna Ziad Hejazi         | 2107548    | B0B
Hadeel Ali Alqarni       | 2105488    | B0B
Njoud Naji Alahmadi      | 2109470    | B0B
Sereen Hussain Baageel   | 2105237    | B0B
*/
package GraphFramework;
import java.util.*;

public class KruskalAlg extends MSTAlgorithm{
    
    //Mrthod Take Graph Object And Return Cost Of The MST Using Kruskal 
    @Override
    public long displayResultingMST(Graph graph) {
        
        //If Graph Empty There Is Nothing To Print And Calculate 
        if (graph.vertex.isEmpty())
            return 0;

        //Add The Edge Into The Arraylist And Sort them 
        List<Edge> edges = new ArrayList<>();
        for (Vertex vertecies : graph.vertex.values()) {
            edges.addAll(vertecies.getEdges());
        }
        edges.sort((e1, e2) -> Integer.compare(e1.weight, e2.weight));

        
        Map<Vertex, Vertex> parent = new HashMap<>();
        List<Edge> mst = new ArrayList<>();

        //Add The Parent Into The Map
        for (Vertex vertecies : graph.vertex.values()) {
            parent.put(vertecies, vertecies);
        }

        //Assign Parent For Vertices
        for (Edge edge : edges) {
            Vertex source = edge.getSource();
            Vertex target = edge.getTarget();

            Vertex parentOfSource = findParent(source, parent);
            Vertex parentOfTarget = findParent(target, parent);

            if (parentOfSource != parentOfTarget) {
                mst.add(edge);
                parent.put(parentOfSource, parentOfTarget);
            }
        }

        //Print The Minimum Spanning Tree
        System.out.println("The Phone Network (Minimum Spanning Tree) Generated By Kruskal Algorithm Is As Follow: ");
        int totalWeight = 0;
        Set<Edge> visited = new HashSet<>();
        for (Edge edge : mst) {
            if (visited.contains(edge))
                continue;
            if(mst.size() <= 100){
                System.out.println(edge);
            }
            else{
            }
            totalWeight += edge.weight;
            visited.add(edge);
        }
        System.out.println("The Cost Of Designed Network: " + totalWeight);
        return totalWeight;
    }

    //Method To Find The Parent For Node
    private Vertex findParent(Vertex vertices, Map<Vertex, Vertex> parent) {
        if (parent.get(vertices) != vertices) {
            parent.put(vertices, findParent(parent.get(vertices), parent));
        }
        return parent.get(vertices);
    }
}

